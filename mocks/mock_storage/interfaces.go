// Code generated by MockGen. DO NOT EDIT.
// Source: storage/interfaces.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/m1kola/shipsterbot/models"
	reflect "reflect"
)

// MockDataStorageInterface is a mock of DataStorageInterface interface
type MockDataStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorageInterfaceMockRecorder
}

// MockDataStorageInterfaceMockRecorder is the mock recorder for MockDataStorageInterface
type MockDataStorageInterfaceMockRecorder struct {
	mock *MockDataStorageInterface
}

// NewMockDataStorageInterface creates a new mock instance
func NewMockDataStorageInterface(ctrl *gomock.Controller) *MockDataStorageInterface {
	mock := &MockDataStorageInterface{ctrl: ctrl}
	mock.recorder = &MockDataStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStorageInterface) EXPECT() *MockDataStorageInterfaceMockRecorder {
	return m.recorder
}

// AddUnfinishedCommand mocks base method
func (m *MockDataStorageInterface) AddUnfinishedCommand(command models.UnfinishedCommand) error {
	ret := m.ctrl.Call(m, "AddUnfinishedCommand", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUnfinishedCommand indicates an expected call of AddUnfinishedCommand
func (mr *MockDataStorageInterfaceMockRecorder) AddUnfinishedCommand(command interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnfinishedCommand", reflect.TypeOf((*MockDataStorageInterface)(nil).AddUnfinishedCommand), command)
}

// GetUnfinishedCommand mocks base method
func (m *MockDataStorageInterface) GetUnfinishedCommand(chatID int64, userID int) (*models.UnfinishedCommand, error) {
	ret := m.ctrl.Call(m, "GetUnfinishedCommand", chatID, userID)
	ret0, _ := ret[0].(*models.UnfinishedCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfinishedCommand indicates an expected call of GetUnfinishedCommand
func (mr *MockDataStorageInterfaceMockRecorder) GetUnfinishedCommand(chatID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfinishedCommand", reflect.TypeOf((*MockDataStorageInterface)(nil).GetUnfinishedCommand), chatID, userID)
}

// DeleteUnfinishedCommand mocks base method
func (m *MockDataStorageInterface) DeleteUnfinishedCommand(chatID int64, userID int) error {
	ret := m.ctrl.Call(m, "DeleteUnfinishedCommand", chatID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnfinishedCommand indicates an expected call of DeleteUnfinishedCommand
func (mr *MockDataStorageInterfaceMockRecorder) DeleteUnfinishedCommand(chatID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnfinishedCommand", reflect.TypeOf((*MockDataStorageInterface)(nil).DeleteUnfinishedCommand), chatID, userID)
}

// AddShoppingItemIntoShoppingList mocks base method
func (m *MockDataStorageInterface) AddShoppingItemIntoShoppingList(item models.ShoppingItem) error {
	ret := m.ctrl.Call(m, "AddShoppingItemIntoShoppingList", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShoppingItemIntoShoppingList indicates an expected call of AddShoppingItemIntoShoppingList
func (mr *MockDataStorageInterfaceMockRecorder) AddShoppingItemIntoShoppingList(item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShoppingItemIntoShoppingList", reflect.TypeOf((*MockDataStorageInterface)(nil).AddShoppingItemIntoShoppingList), item)
}

// GetShoppingItem mocks base method
func (m *MockDataStorageInterface) GetShoppingItem(itemID int64) (*models.ShoppingItem, error) {
	ret := m.ctrl.Call(m, "GetShoppingItem", itemID)
	ret0, _ := ret[0].(*models.ShoppingItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingItem indicates an expected call of GetShoppingItem
func (mr *MockDataStorageInterfaceMockRecorder) GetShoppingItem(itemID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingItem", reflect.TypeOf((*MockDataStorageInterface)(nil).GetShoppingItem), itemID)
}

// DeleteShoppingItem mocks base method
func (m *MockDataStorageInterface) DeleteShoppingItem(itemID int64) error {
	ret := m.ctrl.Call(m, "DeleteShoppingItem", itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShoppingItem indicates an expected call of DeleteShoppingItem
func (mr *MockDataStorageInterfaceMockRecorder) DeleteShoppingItem(itemID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShoppingItem", reflect.TypeOf((*MockDataStorageInterface)(nil).DeleteShoppingItem), itemID)
}

// GetShoppingItems mocks base method
func (m *MockDataStorageInterface) GetShoppingItems(chatID int64) ([]*models.ShoppingItem, error) {
	ret := m.ctrl.Call(m, "GetShoppingItems", chatID)
	ret0, _ := ret[0].([]*models.ShoppingItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingItems indicates an expected call of GetShoppingItems
func (mr *MockDataStorageInterfaceMockRecorder) GetShoppingItems(chatID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingItems", reflect.TypeOf((*MockDataStorageInterface)(nil).GetShoppingItems), chatID)
}

// DeleteAllShoppingItems mocks base method
func (m *MockDataStorageInterface) DeleteAllShoppingItems(chatID int64) error {
	ret := m.ctrl.Call(m, "DeleteAllShoppingItems", chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllShoppingItems indicates an expected call of DeleteAllShoppingItems
func (mr *MockDataStorageInterfaceMockRecorder) DeleteAllShoppingItems(chatID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllShoppingItems", reflect.TypeOf((*MockDataStorageInterface)(nil).DeleteAllShoppingItems), chatID)
}
